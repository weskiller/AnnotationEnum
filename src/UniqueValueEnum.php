<?php


namespace Weskiller\Enum;


use Weskiller\Enum\Contract\Enum;

class UniqueValueEnum extends Enum
{
    protected array $elements = [];

    public function __construct($value,array $values = null)
    {
        parent::__construct(self::nameOfConstantValue($value));
        if($values) {
            $this->elements = static::validateConstantValues($values);
        }
    }
    public static function instance($value,...$values)
    {
        return new static($value,static::transferArguments($values)); // TODO: Change the autogenerated stub
    }

    public static function __callStatic($name, ...$arguments)
    {
        return static::instance($name, static::transferArguments($arguments)); // TODO: Change the autogenerated stub
    }

    public function is($element): bool
    {
        return $this->value == ($element instanceof static ? $element->value : $element);
    }

    public function in($values): bool
    {
        return in_array($this->value, $values);
    }

    public function addElements(...$values)
    {
        $elements = static::transferArguments($values);
        $success = 0;
        foreach ($elements as $value) {
            if($name = self::valueOfConstantName($value) and  !isset($this->elements[$value])) {
                $this->elements[$value] = $name;
                $success++;
            }
        }
        return $success;
    }

    public function removeElements(...$values)
    {
        $elements = static::transferArguments($values);
        $success = 0;
        foreach ($elements as $value) {
            if(isset($this->elements[$value])) {
                unset($this->elements[$value]);
                $success++;
            }
        }
        return $success;
    }

    public function isBelongTo()
    {
        return $this->in($this->elements);
    }
}